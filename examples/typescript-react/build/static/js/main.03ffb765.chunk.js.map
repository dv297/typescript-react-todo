{"version":3,"sources":["components/TodoItem.tsx","components/TodoFooter.tsx","utils/isDefined.ts","App.tsx","index.tsx"],"names":["TodoItem","props","todo","isEditing","onEdit","onEditSubmission","onEditCancel","useState","title","editingStateText","setEditingStateText","className","classNames","completed","editing","type","checked","onChange","onToggle","onDoubleClick","onSubmit","event","preventDefault","value","updatedValue","target","onBlur","onKeyUp","key","autoFocus","TodoFooter","remainingTodosCount","completedCount","onClearCompleted","itemCountLabel","exact","to","activeClassName","onClick","isDefined","arg","withRouter","inputFieldText","setInputFieldText","initialTodos","todos","setTodos","undefined","idOfTodoToEdit","setIdOfTodoToEdit","visibleTodos","filter","matchPath","location","pathname","path","getCountOfActiveTodos","length","onTodoEdit","id","onTodoEditSubmission","todoToUpdate","updatedTitle","updatedTodos","map","handleSavingTodos","onTodoEditCancel","newTodo","uuid","newValue","placeholder","htmlFor","toggleSingleTodo","todosJSON","localStorage","getItem","JSON","parse","retrieveSavedTodos","ReactDOM","render","setItem","stringify","document","getElementById"],"mappings":"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","file":"static/js/main.03ffb765.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, FormEvent, KeyboardEvent } from 'react';\nimport classNames from 'classnames';\n\ninterface ITodoItemProps {\n  todo: ITodo;\n\n  isEditing: boolean;\n\n  onToggle: (event: ChangeEvent<HTMLInputElement>) => void;\n  onEdit: (todo: ITodo) => void;\n  onEditSubmission: (todo: ITodo, updatedTitle: string) => void;\n  onEditCancel: (todo: ITodo) => void;\n}\n\nconst TodoItem: React.FC<ITodoItemProps> = (props: ITodoItemProps) => {\n  const { todo, isEditing, onEdit, onEditSubmission, onEditCancel } = props;\n  const [editingStateText, setEditingStateText] = useState(todo.title);\n\n  const handleLabelDoubleClick = () => {\n    onEdit(todo);\n    setEditingStateText(todo.title);\n  };\n\n  const handleEditInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const updatedValue = event.target.value;\n    setEditingStateText(updatedValue);\n  };\n\n  const handleEditInputBlur = () => {\n    onEditSubmission(todo, editingStateText);\n  };\n\n  const handleEditFormSubmission = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onEditSubmission(todo, editingStateText);\n  };\n\n  const handleEditInputKeyUp = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      onEditCancel(todo);\n    }\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing: isEditing,\n      })}\n    >\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" checked={todo.completed} onChange={props.onToggle} />\n        <label onDoubleClick={handleLabelDoubleClick}>{todo.title}</label>\n      </div>\n      {isEditing && (\n        <form onSubmit={handleEditFormSubmission}>\n          <input\n            className=\"edit\"\n            value={editingStateText}\n            onChange={handleEditInputChange}\n            onBlur={handleEditInputBlur}\n            onKeyUp={handleEditInputKeyUp}\n            autoFocus\n          />\n        </form>\n      )}\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ninterface ITodoFooterProps {\n  remainingTodosCount: number;\n  completedCount: number;\n  onClearCompleted: () => void;\n}\n\nconst TodoFooter: React.FC<ITodoFooterProps> = (props) => {\n  const { remainingTodosCount, completedCount, onClearCompleted } = props;\n\n  const itemCountLabel = remainingTodosCount > 1 ? 'items' : 'item';\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{remainingTodosCount}</strong> {itemCountLabel} left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <NavLink exact to=\"/\" activeClassName=\"selected\">\n            All\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/active\" activeClassName=\"selected\">\n            Active\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/completed\" activeClassName=\"selected\">\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n      {completedCount > 0 && (\n        <button className=\"clear-completed\" onClick={onClearCompleted}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nexport default TodoFooter;\n","function isDefined<T>(arg: T | undefined): arg is T {\n  return typeof arg !== 'undefined';\n}\n\nexport default isDefined;\n","import React, { useState, ChangeEvent, FormEvent } from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport { withRouter, RouteComponentProps, matchPath } from 'react-router-dom';\r\n\r\nimport TodoItem from './components/TodoItem';\r\nimport TodoFooter from './components/TodoFooter';\r\nimport isDefined from './utils/isDefined';\r\n\r\ninterface IAppProps {\r\n  initialTodos: Array<ITodo> | [];\r\n  handleSavingTodos: (todos: Array<ITodo>) => void;\r\n}\r\n\r\nconst App: React.FC<IAppProps & RouteComponentProps> = (props) => {\r\n  const [inputFieldText, setInputFieldText] = useState('');\r\n  const [todos, setTodos] = useState<Array<ITodo>>(props.initialTodos);\r\n  const [idOfTodoToEdit, setIdOfTodoToEdit] = useState<String | undefined>(undefined);\r\n\r\n  const visibleTodos = todos.filter((todo) => {\r\n    if (matchPath(props.location.pathname, { path: '/active' })) {\r\n      return !todo.completed;\r\n    }\r\n    if (matchPath(props.location.pathname, { path: '/completed' })) {\r\n      return todo.completed;\r\n    }\r\n\r\n    return true;\r\n  });\r\n\r\n  const onInputFieldChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = event.target.value;\r\n    setInputFieldText(newValue);\r\n  };\r\n\r\n  const toggleSingleTodo = (todoToUpdate: ITodo) => {\r\n    const updatedTodos = todos.map((todo) => {\r\n      if (todo.id !== todoToUpdate.id) {\r\n        return todo;\r\n      }\r\n\r\n      return {\r\n        ...todo,\r\n        completed: !todo.completed,\r\n      };\r\n    });\r\n\r\n    setTodos(updatedTodos);\r\n    props.handleSavingTodos(updatedTodos);\r\n  };\r\n\r\n  const toggleAllTodos = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const checked = event.target.checked;\r\n    const updatedTodos = todos.map((todo) => ({ ...todo, completed: checked }));\r\n    setTodos(updatedTodos);\r\n    props.handleSavingTodos(updatedTodos);\r\n  };\r\n\r\n  const onFormSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const newTodo = {\r\n      id: uuid(),\r\n      title: inputFieldText,\r\n      completed: false,\r\n    };\r\n    const updatedTodos = [...todos, newTodo];\r\n    setTodos(updatedTodos);\r\n    props.handleSavingTodos(updatedTodos);\r\n    setInputFieldText('');\r\n  };\r\n\r\n  const getCountOfActiveTodos = () => {\r\n    const activeTodos = todos.filter((todo) => !todo.completed);\r\n    return activeTodos.length;\r\n  };\r\n\r\n  const getCountOfCompletedTodos = () => {\r\n    const activeTodos = todos.filter((todo) => todo.completed);\r\n    return activeTodos.length;\r\n  };\r\n\r\n  const onTodoEdit = (todo: ITodo) => {\r\n    setIdOfTodoToEdit(todo.id);\r\n  };\r\n\r\n  const onTodoEditSubmission = (todoToUpdate: ITodo, updatedTitle: string) => {\r\n    const updatedTodos = todos\r\n      .map((todo) => {\r\n        if (todo.id !== todoToUpdate.id) {\r\n          return todo;\r\n        }\r\n\r\n        if (updatedTitle === '') {\r\n          return undefined;\r\n        }\r\n\r\n        return {\r\n          ...todo,\r\n          title: updatedTitle,\r\n        };\r\n      })\r\n      .filter(isDefined);\r\n\r\n    setTodos(updatedTodos);\r\n    props.handleSavingTodos(updatedTodos);\r\n    setIdOfTodoToEdit(undefined);\r\n  };\r\n\r\n  const onTodoEditCancel = () => {\r\n    setIdOfTodoToEdit(undefined);\r\n  };\r\n\r\n  const onClearCompleted = () => {\r\n    const updatedTodos = todos.filter((todo) => !todo.completed);\r\n    setTodos(updatedTodos);\r\n    props.handleSavingTodos(updatedTodos);\r\n  };\r\n\r\n  return (\r\n    <section className=\"todoapp\">\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <form onSubmit={onFormSubmit}>\r\n          <input\r\n            className=\"new-todo\"\r\n            value={inputFieldText}\r\n            onChange={onInputFieldChange}\r\n            autoFocus\r\n            placeholder=\"What needs to be done?\"\r\n          />\r\n        </form>\r\n        {todos.length > 0 && (\r\n          <>\r\n            <section className=\"main\">\r\n              <input\r\n                id=\"toggle-all\"\r\n                className=\"toggle-all\"\r\n                type=\"checkbox\"\r\n                onChange={toggleAllTodos}\r\n                checked={getCountOfActiveTodos() === 0}\r\n              />\r\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n              <ul className=\"todo-list\">\r\n                {visibleTodos.map((todo) => (\r\n                  <TodoItem\r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    onToggle={() => {\r\n                      toggleSingleTodo(todo);\r\n                    }}\r\n                    isEditing={idOfTodoToEdit === todo.id}\r\n                    onEdit={onTodoEdit}\r\n                    onEditSubmission={onTodoEditSubmission}\r\n                    onEditCancel={onTodoEditCancel}\r\n                  />\r\n                ))}\r\n              </ul>\r\n            </section>\r\n            <TodoFooter\r\n              remainingTodosCount={getCountOfActiveTodos()}\r\n              completedCount={getCountOfCompletedTodos()}\r\n              onClearCompleted={onClearCompleted}\r\n            />\r\n          </>\r\n        )}\r\n      </header>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default withRouter(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'todomvc-common/base.css';\nimport 'todomvc-app-css/index.css';\nimport App from './App';\n\nconst handleSavingTodos = (todos: Array<ITodo>) => {\n  localStorage.setItem('todos', JSON.stringify(todos));\n};\n\nconst retrieveSavedTodos = (): Array<ITodo> => {\n  const todosJSON = localStorage.getItem('todos');\n\n  if (todosJSON) {\n    return JSON.parse(todosJSON);\n  }\n\n  return [];\n};\n\nconst initialTodos = retrieveSavedTodos();\n\nReactDOM.render(\n  <Router>\n    <App initialTodos={initialTodos} handleSavingTodos={handleSavingTodos} />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}